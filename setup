#!/usr/bin/env ruby

require 'optparse'
require 'pathname'
require 'fileutils'

def main
  options = {
    source_path: File.join(Dir.pwd, 'home'),
    target_path: Dir.home,
  }
  OptionParser.new do |opts|
    opts.banner = "Usage:   link [OPTIONS]"

    opts.on("-s", "--source-path", "Absolute path to source dotfiles from. Defaults to $PWD/home") do |p|
      options[:source_path] = p
    end
    opts.on("-t", "--target-path", "Absolute path to install dotfiles to. Defaults to $HOME") do |p|
      options[:target_path] = p
    end
    opts.on("-l", "--list", "List files and their targets") do |p|
      for df in list_files(options) do
        puts df.reverse.join(' -> ')
      end
      exit 0
    end
  end.parse!

  create_links(options)
  exit 0
end

def list_files(options)
  dotfiles = `find -L #{options[:source_path]} -type f`
    .lines
    .map {|f| f.gsub(/^#{options[:source_path]}\//, '').rstrip }
    .map {|df|
      df_dir = Pathname.new(df).parent.to_s
      df_dir = '' if df_dir == '.'
      df_dir += File::SEPARATOR if df_dir != ''

      target_file = File.join(options[:target_path], df_dir)

      if (df.end_with?('linux') and not RUBY_PLATFORM.match 'linux')
        next
      elsif (df.end_with?('mac') and not RUBY_PLATFORM.match 'darwin')
        next
      elsif (df.end_with?('windows') and not RUBY_PLATFORM.match 'windows')
        next
      end

      filename = Pathname.new(df).basename.to_s
      if (df.end_with?('linux') and RUBY_PLATFORM.match 'linux')
        target_file = "#{target_file}#{filename.gsub(/\.linux$/, '')}"
      elsif (df.end_with?('mac') and RUBY_PLATFORM.match 'darwin')
        target_file = "#{target_file}#{filename.gsub(/\.mac$/, '')}"
      elsif (df.end_with?('windows') and RUBY_PLATFORM.match 'windows')
        target_file = "#{target_file}#{filename.gsub(/\.windows$/, '')}"
      else
        target_file = "#{target_file}#{filename}"
      end

      [File.join(options[:source_path], df), target_file]
    }
    .select {|df| df != nil }

  return dotfiles
end

def create_links(options)
  for src, target in list_files(options) do
    target_dir = Pathname.new(target).dirname
    FileUtils.mkdir_p(target_dir) unless Dir.exist?(target_dir)

    if (not File.symlink?(target) and not File.exist?(target))
      puts "Linking #{target}"
      File.symlink(src, target)
    else
      puts "Skipping #{target}, file already exists"
    end
  end
end

main
